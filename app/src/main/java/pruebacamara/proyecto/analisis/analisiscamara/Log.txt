*************************************************************
*   Funciones eliminadas en caso de ser requeridas luego    *
*************************************************************


//Crear una lista con un chooser.
public void showOptions(View view) {
    final CharSequence[] option = {"Abrir Camara", "Elegir de galeria", "Cancelar"};
    final AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
    builder.setTitle("Eleige una opci칩n");
    builder.setItems(option, new DialogInterface.OnClickListener() {
        @Override
        public void onClick(DialogInterface dialog, int which) {
            if(option[which] == "Abrir Camara"){
                openCamera(findViewById(R.id.ok));
            }else if(option[which] == "Elegir de galeria"){

            }else {
                dialog.dismiss();
            }
        }
    });
    builder.show();
}


/**
 * Dado un fuente y un destino copia los datos del archivo, no maneja excepciones la funci칩n
 * que llame debe manejar el error
 *
 * @param source      Archivo fuente de los datos a copiar
 * @param destination Archivo destino de los datos a copiar
 * @throws IOException Lanza una excepci칩n en canso de obtener un error al leer archivo o copiarlo
 */
private void copyFile(File source, File destination) throws IOException {
    FileChannel in = new FileInputStream(source).getChannel();
    FileChannel out = new FileOutputStream(destination).getChannel();

    in.transferTo(0, in.size(), out);
    in.close();
    out.close();
}

/**
 * Dado un path destino crea una nueva imagen con un resize a 256*256, y un valor boleeano que
 * determina si borrar la imagen fuente o no
 * @param source Fuente de la imagen que ser치 compactada
 * @param withDelete si se desea borrar la foto fuente
 */
private void resizeImage(String source, boolean withDelete) {
    Bitmap bitImage = BitmapFactory.decodeFile(source);
    Bitmap outImage = Bitmap.createScaledBitmap(bitImage, 256, 256, true);

    try {
        File save = createImageFile();
        FileOutputStream fileOutputStream;

        fileOutputStream = new FileOutputStream(save);
        outImage.compress(Bitmap.CompressFormat.JPEG, 100, fileOutputStream);
        fileOutputStream.flush();
        fileOutputStream.close();

        if (withDelete) {
            File toDelete = new File(source);
            boolean deleted = toDelete.delete();
            if (!deleted) {
                Log.e("FileError", "No se pudo borrar el archivo");
            }
        }

    } catch (IOException e) {
        Log.e("FileError", "Error creando/borrando un nuevo archivo", e);
    }
}